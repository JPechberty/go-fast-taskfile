#   _____         _     __ _ _
# |_   _|_ _ ___| | __/ _(_) | ___
#   | |/ _` / __| |/ / |_| | |/ _ \
#   | | (_| \__ \   <|  _| | |  __/
#   |_|\__,_|___/_|\_\_| |_|_|\___|
#
# https://taskfile.dev
#

version: '3'

silent: true

##
## ===   Variables ==================================================
##

vars:
  #
  # TASKFILE
  VERSION: 1.0.6
  CONTRIBUTOR: "Benoit Foujols, Julien Pechberty"
  #
  # SYSTEM
  PWD: $PWD
  #
  # DOCKER
  DOCKER: docker
  DOCKER_RUN: "{{.DOCKER}} run"
  DOCKER_COMPOSE: "{{.DOCKER}} compose"
  #
  # SYMFONY
  SYMFONY: symfony
  SYMFONY_CONSOLE: "{{.SYMFONY}} console"
  SYMFONY_LINT: "{{.SYMFONY_CONSOLE}} lint:"
  #
  # COMPOSER
  COMPOSER: composer
  #
  # PHP QA TOOLS
  PHPQA: jakzal/phpqa
  PHPQA_RUN: "{{.DOCKER_RUN}} --init -it --rm -v {{.PWD}}:/project -w /project {{.PHPQA}}"
  #
  # PHP UNIT TOOLS
  PHPUNIT: "APP_ENV=test {{.SYMFONY}} php bin/phpunit"
  #
  # JS TOOLS
  NPM: npm

##
## ===   TASKS ==================================================
##

tasks:
  default:
    cmds:
      - task: help

  ## === 🆘  HELP ==================================================

  help:
    desc: "Description des tâches disponibles"
    cmds:
      - echo "Bienvenu dans Taskfile pour Docker/Symfony"
      - echo "Merci aux contributeurs -> {{.CONTRIBUTOR}}"
      - echo "----------------------------------------------"
      - echo "Version de Taskfile {{.VERSION}}"
      - echo "Voici la description de votre systeme:"
      - echo 'Votre systeme "{{OS}}"'
      - echo 'Votre architecture "{{ARCH}}"'
      - echo "----------------------------------------------"
      - task --list

  ## === 🐋  DOCKER ================================================

  docker-up:
    desc: "Start docker containers"
    cmds:
      - "{{.DOCKER_COMPOSE}} up -d"

  docker-stop:
    desc: "Stop docker containers"
    cmds:
      - "{{.DOCKER_COMPOSE}} stop"

  ## === 📦  CREATE ENVS FILES ==============================================

  create-envs:
    desc: "Create environment files"
    cmds:
      - curl -fsS https://raw.githubusercontent.com/bfoujols/setup-symfony-projet/main/_.env.example > _.env.example
      # python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex)'
      - sed 's/ENVCHANGEUUID/{{.UUID}}/g' _.env.example > .env
    vars:
      UUID:
        sh: uuidgen | tr -d -

  create-docker-envs:
    desc: "Create environment files for docker"
    cmds:
      - curl -fsS https://raw.githubusercontent.com/bfoujols/setup-symfony-projet/main/_docker-compose.yml > _docker-compose.yml
      - DIR="${PWD##*/}" && sed "s/DOCKERCHANGE/$DIR/g" _docker-compose.yml > docker-compose.yml

  generate-docker-compose:
    desc: "Create ready to use docker-compose.yml file"
    cmds:
      - task: create-components-dir
      - |
        echo "Choose your database system ? [mariadb/mysql5/mysql8/mongodb] :"
        read CONFIRM
        case $CONFIRM in 
          mariadb)
            task create-mariadb-env;;
          mysql5)
            task create-mysql5-env;;
          mysql8)
            task create-mysql8-env;;
          mongodb)
            task create-mongo-env;;
          *)
              echo -n "unknown";;
        esac
      - task: remove-components-dir

  ## === 🎛️  SYMFONY ===============================================

  sf-start:
    desc: "Start symfony server"
    cmds:
      - "{{.SYMFONY}} serve -d"

  sf-start-no-ssl:
    desc: "Start symfony server"
    cmds:
      - "{{.SYMFONY}} serve --no-tls -d"

  sf-stop:
    desc: "Stop symfony server"
    cmds:
      - "{{.SYMFONY}} server:stop"

  sf-cc:
    desc: "Clear symfony cache"
    cmds:
      - "{{.SYMFONY_CONSOLE}} cache:clear"

  sf-log:
    desc: "Display symfony logs"
    cmds:
      - "{{.SYMFONY_CONSOLE}} server:log"

  sf-ddc:
    desc: "Create symfony database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:create --if-not-exists"

  sf-ddd:
    desc: "Drop symfony database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:database:drop --if-exists --force"

  sf-dsu:
    desc: "Update symfony schema database"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:schema:update --force"

  sf-mm:
    desc: "Make symfony migration"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:migration"

  sf-dmm:
    desc: "Migrate"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:migrations:migrate --no-interaction"

  sf-dfl:
    desc: "Load fixtures"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:fixtures:load --no-interaction"

  sf-me:
    desc: "Make entity"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:entity"

  sf-mc:
    desc: "Make controller"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:controller"

  sf-mf:
    desc: "Make form"
    cmds:
      - "{{.SYMFONY_CONSOLE}} make:form"

  sf-perm:
    desc: "Fix permissions"
    cmds:
      - "chmod -R 777 var"

  sf-sudo-perm:
    desc: "Fix permissions with sudo"
    cmds:
      - "sudo chmod -R 777 var"

  sf-dump-env:
    desc: "Dump env"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:dotenv"

  sf-dump-env-container:
    desc: "Dump env container"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:container --env-vars"

  sf-dump-router:
    desc: "Dump routes"
    cmds:
      - "{{.SYMFONY_CONSOLE}} debug:router"

  sf-debug:
    desc: "Debug Systeme"
    cmds:
      - "{{.SYMFONY_CONSOLE}} local:php:list"

  sf-open:
    desc: "Open symfony server"
    cmds:
      - "{{.SYMFONY}} open:local"

  sf-check-requirements:
    desc: "Check symfony requirements"
    cmds:
      - "{{.SYMFONY}} check:requirements"

  ## === 📦  COMPOSER ==============================================

  composer-install:
    desc: "Install composer dependencies"
    cmds:
      - "{{.COMPOSER}} install"

  composer-update:
    desc: "Update composer dependencies"
    cmds:
      -  "{{.COMPOSER}} update"

  composer-validate:
    desc: Validate composer.json file.
    cmds:
      - "{{.COMPOSER}} validate"

  composer-validate-deep:
    desc: Validate composer.json and composer.lock files in strict mode.
    cmds:
      - "{{.COMPOSER}} validate --strict --check-lock"

  ## === 📦  NPM ==============================================

  npm-install:
    desc: "Install npm dependencies"
    cmds:
      - "{{.NPM}} install --force"

  npm-update:
    desc: "Update npm dependencies"
    cmds:
      - "{{.NPM}} update"

  npm-build:
    desc: "Build assets"
    cmds:
      - "{{.NPM}} run build"

  npm-dev:
    desc: "Build assets in dev mode"
    cmds:
      - "{{.NPM}} run dev"

  npm-watch:
    desc: "Watch assets"
    cmds:
      - "{{.NPM}} run watch -d"

  ## === 🐛  PHPQA =================================================

  qa-cs-fixer-dry-run:
    desc: "Run php-cs-fixer dry run"
    cmds:
      - "{{.PHPQA_RUN}} php-cs-fixer fix ./src --rules=@Symfony --verbose --dry-run"

  qa-cs-fixer:
    desc: "Run php-cs-fixer"
    cmds:
      - "{{.PHPQA_RUN}} php-cs-fixer fix ./src --rules=@Symfony --verbose"

  qa-phpstan:
    desc: "Run phpstan"
    cmds:
      - "{{.PHPQA_RUN}} phpstan analyse ./src --level=7"

  qa-security-checker:
    desc: "Run security-checker"
    cmds:
      - "{{.SYMFONY}} security:check"

  qa-phpcpd:
    desc: "Run phpcpd (copy/paste detector)"
    cmds:
      - "{{.PHPQA_RUN}} phpcpd ./src"

  qa-php-metrics:
    desc: "Run php-metrics"
    cmds:
      - "{{.PHPQA_RUN}} phpmetrics --report-html=var/phpmetrics ./src"

  qa-lint-twigs:
    desc: "Run lint:twig"
    cmds:
      - "{{.SYMFONY_LINT}}twig ./templates"

  qa-lint-yaml:
    desc: "Run lint:yaml"
    cmds:
      - "{{.SYMFONY_LINT}}yaml ./config"

  qa-lint-container:
    desc: "Run lint:container"
    cmds:
      - "{{.SYMFONY_LINT}}container"

  qa-lint-schema:
    desc: "Lint Doctrine schema"
    cmds:
      - "{{.SYMFONY_CONSOLE}} doctrine:schema:validate --skip-sync -vvv --no-interaction"

  ## === 🔎  TESTS =================================================

  tests:
    desc: "Run tests"
    cmds:
      - "{{.PHPUNIT}} --testdox"

  tests-coverage:
    desc: "Run tests with coverage"
    cmds:
      - "{{.PHPUNIT}} --coverage-html var/coverage"

  ## === 👨‍🍳  DOCKER RECIPES =========================================

  create-components-dir:
    desc: "Create _docker-components directory"
    internal: true
    cmds:
      - |
        if [ ! -d _docker-components ]; then
          mkdir _docker-components
        fi

  remove-components-dir:
    desc: "Remove _docker-components directory"
    cmds:
      - |
        if [ -d _docker-components ]; then
          rm -r _docker-components
        fi

  generate-file:
    desc: "Create empty docker-compose.yml"
    internal: true
    cmds:
      - cmd: touch {{.DOCKER_FILENAME}}
        platforms: [ linux,darwin ]
      - cmd: type {{.DOCKER_FILENAME}}
        platforms: [ windows ]

  add-component:
    desc: "Add component to docker-compose"
    internal: true
    cmds:
      #- curl -fsS https://raw.githubusercontent.com/JPechberty/setup-symfony-projet/%23Version-1.0.7/docker-components/{{.SRC_COMP_FILENAME}} > ./_docker-components/{{.DEST_COMP_FILENAME}}
      - curl -fsS https://raw.githubusercontent.com/bfoujols/setup-symfony-projet/main/docker-components/{{.SRC_COMP_FILENAME}} > ./_docker-components/{{.DEST_COMP_FILENAME}}
      - DIR="${PWD##*/}" && sed 's/ENVCHANGEUUID/{{.UUID}}/g' '_docker-components/{{.DEST_COMP_FILENAME}}' >> {{.DEST_DOCKER_COMPOSE_FILE}}

  create-mariadb-env:
    desc: "Create MariaDb Docker-compose recipe"
    cmds:
      - task: generate-file
        vars:
          DOCKER_FILENAME: docker-compose_mariadb.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mariadb.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mariadb.yml
          DEST_COMP_FILENAME: _mariadb.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mariadb.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mariadb.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mariadb.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mariadb.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  create-mysql5-env:
    desc: "Create Mysql5 Docker-compose recipe"
    cmds:
      - task: generate-file
        vars:
          DOCKER_FILENAME: docker-compose_mysql5.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql5.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mysql5.yml
          DEST_COMP_FILENAME: _mysql5.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql5.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql5.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql5.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql5.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  create-mysql8-env:
    desc: "Create Mysql8 Docker-compose recipe"
    cmds:
      - task: generate-file
        vars:
          DOCKER_FILENAME: docker-compose_mysql8.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql8.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mysql8.yml
          DEST_COMP_FILENAME: _mysql8.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql8.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_phpmyadmin.yml
          DEST_COMP_FILENAME: _phpmyadmin.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql8.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql8.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mysql8.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -


  create-mongo-env:
    desc: "Create MongoDb Docker-compose recipe"
    cmds:
      - task: generate-file
        vars:
          DOCKER_FILENAME: docker-compose_mongo.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-init.yml
          DEST_COMP_FILENAME: _docker-init.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mongo.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mongo.yml
          DEST_COMP_FILENAME: _mongo.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mongo.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mongo-express.yml
          DEST_COMP_FILENAME: _mongo-express.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mongo.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: services/_mailer.yml
          DEST_COMP_FILENAME: _mailer.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mongo.yml
      - task: add-component
        vars:
          SRC_COMP_FILENAME: _docker-volumes.yml
          DEST_COMP_FILENAME: _docker-volumes.yml
          DEST_DOCKER_COMPOSE_FILE: docker-compose_mongo.yml
    vars:
      UUID:
        sh: uuidgen | tr -d -

  ## === ⭐  OTHERS =================================================

  before-commit:
    desc: "Run before commit"
    cmds:
      - task: qa-cs-fixer
      - task: qa-phpstan
      - task: qa-security-checker
      - task: qa-phpcpd
      - task: qa-lint-twigs
      - task: qa-lint-yaml
      - task: qa-lint-container
      - task: qa-lint-schema
      - task: tests

  first-install:
    desc: "First install"
    cmds:
      - |
        echo "Are you sure you download to file raw config .env ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task create-envs
        fi
      - |
        echo "Don't forget to edit the file .env for project ? [Enter] :"
        read CONFIRM
      - |
        echo "Are you sure you download to file raw config docker-compose ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task create-docker-envs
          task docker-up
        fi
      - task: composer-install
      - |
        echo "Are you sure you run to npm install ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task npm-install
        fi
      - task: docker-up
      - task: sf-perm
      - task: sf-ddc
      - task: sf-dmm
      - |
        echo "Are you sure you want to datafixture ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-dfl
        fi
      - task: sf-start
      - task: sf-open

  start:
    desc: "Start"
    cmds:
      - |
        if [ ! -f .env ]; then
          task first-install
        else
          task docker-up 
          task sf-start 
          task sf-open
        fi

  stop:
    desc: "Stop"
    cmds:
      - |
        echo "Are you sure you want to stop ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-stop
          task docker-stop
        fi

  reset-db:
    desc: "Reset database"
    cmds:
      - |
        echo "Are you sure you want to reset ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd
          task sf-ddc
          task sf-dmm
        fi

  rebuild-db:
    desc: "Reset database and reload fixtures"
    cmds:
      - |
        echo "Are you sure you want to reset and reload fixtures ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd
          task sf-ddc
          task sf-dmm
          task sf-dfl
        fi

  reset-db-test:
    desc: "Reset test database"
    cmds:
      - |
        echo "Are you sure you want to reset test database ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd-test
          task sf-ddc-test
          task sf-dmm-test
        fi

  rebuild-db-test:
    desc: "Reset test database and reload fixtures"
    cmds:
      - |
        echo "Are you sure you want to reset and reload fixtures ? [y/N] :"
        read CONFIRM
        if [ "$CONFIRM" = "y" ]; then
          task sf-ddd-test
          task sf-ddc-test
          task sf-dmm-test
          task sf-dfl-test
        fi

  health-check:
    desc: "Perform health check after files generation"
    cmds:
      - echo "Health check performed succesfully !"
    preconditions:
      - sh: "[ ! -d _docker-components  ]"
        msg: "_docker-components folder not removed !"
      - sh: "[ -f docker-compose_{{.CLI_ARGS}}.yml ]"
        msg: "docker-compose file missing"